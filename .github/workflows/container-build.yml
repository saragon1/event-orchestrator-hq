name: Build and Push Multi-Arch Container

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-amd64:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      digest: ${{ steps.push_amd64.outputs.digest }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push AMD64 image
        id: push_amd64
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-arm64:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      digest: ${{ steps.push_arm64.outputs.digest }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU for ARM64
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push ARM64 image
        id: push_arm64
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.simple
          platforms: linux/arm64
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

  manifest:
    needs: [ build-amd64, build-arm64 ]
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push multi-arch manifest
        run: |
          IMAGE_TAG=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
          IMAGE_DIGEST_AMD64=${{ needs.build-amd64.outputs.digest }}
          IMAGE_DIGEST_ARM64=${{ needs.build-arm64.outputs.digest }}

          # --- CONTROLLO DI SICUREZZA ---
          # Fa fallire il job con un errore chiaro se uno dei digest Ã¨ vuoto.
          if [[ -z "$IMAGE_DIGEST_AMD64" || -z "$IMAGE_DIGEST_ARM64" ]]; then
            echo "::error::Uno o entrambi i digest delle immagini sono vuoti."
            echo "Digest AMD64: '$IMAGE_DIGEST_AMD64'"
            echo "Digest ARM64: '$IMAGE_DIGEST_ARM64'"
            echo "Verifica che i job di build precedenti abbiano i percorsi dei Dockerfile corretti."
            exit 1
          fi
          
          echo "Creating manifest for $IMAGE_TAG..."
          docker manifest create $IMAGE_TAG \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${IMAGE_DIGEST_AMD64} \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${IMAGE_DIGEST_ARM64}
          
          docker manifest push $IMAGE_TAG
